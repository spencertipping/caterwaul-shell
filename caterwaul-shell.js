 caterwaul.module( 'shell' , function ($) { $.shell =function (context, compiler) { ; return jQuery( "<input>") .addClass( "caterwaul-shell") .modus($.shell.val, $.shell.val) .on( 'keydown keypress keyup' , $.shell.handle_interaction) .val($.shell.state( {context_: context, compiler_: compiler}))} ,$.merge( $.shell, (function () {var compiler = $( ':all') , val =function (s) {var self = jQuery(this) ; return s ? self.data( 'caterwaul-shell-state' , s) .modus( 'val' , s.text_) .toggleClass( 'error' , !s.is_valid()):state($.merge( {} , self.data( 'caterwaul-shell-state') , {text_: self.modus( 'val')}))} , state =function (settings) { ; return(function () {var text = settings.text_ || '' ; return new state_ctor(settings.history_ || {before: [] , after: []} , settings.values_ || [] , text, settings.selection_ || {start: text.length, end: text.length} , settings.context_ || window, settings.compiler_ || compiler)}) .call(this)} , state_ctor = (function (it) {return $.merge( it.prototype, {is_valid:function () { ; return(function () {try {return( $.parse(this.text_) , true)} catch (e) {return false}}) .call(this)} , modify:function (o) { ; return state($.merge( {} , this, o))} , accept:function (c) { ; return( this) .modify( {text_: ( '' + (this.text_.substr(0, this.selection_.start)) + '' + (String.fromCharCode(c)) + '' + (this.text_.substr(this.selection_.end)) + '') , selection_: {start: this.selection_.start + 1, end: this.selection_.end + 1}})} , previous:function () { ; return this.history_.before.length ? ( this) .modify( {history_: {before: this.history_.before.slice(0, this.history_.before.length - 1) , after: ( [this.text_]) .concat( this.history_.after)} , text_: this.history_.before[this.history_.before.length - 1] , selection_: null }): this} , next:function () { ; return this.history_.after.length ? ( this) .modify( {history_: {before: ( this.history_.before) .concat( [this.text_]) , after: this.history_.after.slice(1)} , text_: this.history_.after[0] , selection_: null }): this} , evaluate:function () { ; return state( {history_: {before: ( ( this.history_.before) .concat( this.history_.after)) .concat( [this.text_]) , after: []} , values_: ( this.values_) .concat( [ (function () {try {return{value: this.compiler_(this.text_, this.context_)}} catch (e) {return {error: e}}}) .call(this)]) , context_: this.context_, compiler_: this.compiler_})}}) , it}) .call(this, ( (function (history, values, text, selection, context, compiler) {return this.history_ = history, this.values_ = values, this.text_ = text, this.selection_ = selection, this.context_ = context, this.compiler_ = compiler, null}))) , handle_interaction =function (e) {var self = jQuery(this) ;var old_state = self.val() ;var new_state = interact.call(self, old_state, e) ; return new_state !== old_state ? ( self.val(new_state) , false): true} , interact =function (s, e) { ; return e.type === 'keypress' ? e.which === 13 ? s.evaluate(): s.accept(e.which): e.type === 'keydown' ? e.which === 38 ? s.previous(): e.which === 40 ? s.next(): s: s} ; return{ compiler: compiler, val: val, state: state, state_ctor: state_ctor, handle_interaction: handle_interaction, interact: interact}}) .call(this))}) ;